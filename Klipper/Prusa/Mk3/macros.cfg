# WARNING. DO NOT EDIT THIS FILE.
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

[gcode_macro Z_OFFSET]
description: Mesuser le Z-Offset
gcode:
  G28
  PROBE_CALIBRATE

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
    ;Put printing message on LCD screen
    M117 Heating... 
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Run Bed leveling
    BED_MESH_CALIBRATE
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    G1 Z5.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X0.1 Y20 Z0.3 F5000.0 ; Move to start position
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Run Slicer start Gcode to clean nozzle
    G1 Z0.3 F720
    G1 Y-3 F1000 ; go outside print area
    G92 E0
    G1 X60 E9 F1000 ; intro line
    G1 X100 E12.5 F1000 ; intro line
    G92 E0 ; reset extruder
    G1 Z1.0 F3000 ; move z up little to prevent scratching of surface
    G92 E0
    #M221 S{if layer_height<0.075}100{else}95{endif}
    #; Don't change E values below. Excessive value can damage the printer.
    #{if print_settings_id=~/.*(DETAIL @MK3|QUALITY @MK3).*/}M907 E430 ; set extruder motor current{endif}
    #{if print_settings_id=~/.*(SPEED @MK3|DRAFT @MK3).*/}M907 E538 ; set extruder motor current{endif}



[gcode_macro END_PRINT]
gcode:
    M104 S0
    M140 S0
    G92 E1
    G1 X0 Y200 F3600
    G28 X0 Y0
    M84

[gcode_macro G29]
gcode:
    BED_MESH_CALIBRATE


##################################################
# Calibration du PID Buse / Plateau
##################################################

[gcode_macro CALIBRATION_PID_BED_60]
description: PID Plateau
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  G28
  G1 Z50 F1500
  RESPOND MSG="PID du plateau en cours..."
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(60)}
  G28
  SAVE_CONFIG
  {% endif %}


[gcode_macro CALIBRATION_PID_HOTEND_200]
description: PID Hotend
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  G28
  G1 Z50 F1500
  RESPOND MSG="PID de la buse en cours..."
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(200)}
  G28
  SAVE_CONFIG
  {% endif %}


##################################################
# Sauvegarde des paramÃ¨tres
##################################################

[gcode_macro SAUVEGARDER]
description: Sauvegarder la configuration
gcode:
  SAVE_CONFIG


[gcode_macro M486]
gcode:
    CLEAR_PAUSE

[gcode_macro G80]
gcode:
    M117 Bed leveling
    BED_MESH_CALIBRATE
    G1 X0 Y0 Z0.4 F4000
    M117
    M400

[gcode_macro G81]
gcode:
 BED_MESH_OUTPUT
 
[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M109 S{params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  G92 E0.0
  G91
  G1 E-45 F5000
  G1 E-15 F1000
  G1 E-20 F1000
  G90
  G92 E0.0
  M400
  M117 Remove Filament Now!
  M300 S300 P1000
  M117 Filament unloaded!
  RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
  M117 Heating...
  M109 S{params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G92 E0.0
  G91
  G1 E70 F400
  G1 E40 F100
  G90
  G92 E0.0
  M400
  M117 Filament loaded!
  RESTORE_GCODE_STATE NAME=load_state

[delayed_gcode clear_display]
initial_duration: 0.
gcode:
  M117

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  SDCARD_RESET_FILE
  # Raise nozzle by 60mm
  G1 Z60 F3000
  G90
  # Disable steppers
  M84
  
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200  
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# Prusa's calibrate Z
[gcode_macro Calibrate_Z]
description: Calibrate Z axis
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    G1 X20 Y0
    G1 Z{max_z-10} F2000 #Update with Z height.
    FORCE_MOVE STEPPER=stepper_z Distance=20 Velocity=10
    G1 Z{max_z-50} F2000 # Move down
    G28 # Home again

[gcode_macro PREHEAT_PLA]
gcode:
    # Start bed heating
    M140 S60
    # Start nozzle heating
    M104 S200

[gcode_macro PREHEAT_PETG]
gcode:
    # Start bed heating
    M140 S90
    # Start nozzle heating
    M104 S240

[gcode_macro PREHEAT_TPU]
gcode:
    # Start bed heating
    M140 S50
    # Start nozzle heating
    M104 S190

# Color Change
[gcode_macro M600]
description: Color change
gcode:
    {% set X = params.X|default(0)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M601]
description: Pause
gcode: PAUSE

##################################################
# Managing Slicer Controls
##################################################

[gcode_macro M201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set accel = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}


[gcode_macro M203]
description: Sets maximum velocity
  Usage: M203 [X<speed>] [Y<speed>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set speed = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}


[gcode_macro M204]
description: Sets maximum accelleration.
  Usage: M204 [S<accel>] [P<accel> T<accel>]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}
  {% if 'S' in params %}
  {% set s = params.S|float %}
  SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% endif %}


[gcode_macro M205]
description: Sets square corner velocity
  Usage: M205 [X<corner_speed>] [Y<corner_speed>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set corner_speed = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}

